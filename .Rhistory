y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
f(y)
x*y
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
g
g(y)
f(y)
x <- 10
y <- 2
test_vector <- c(2,5,6)
x %in% test_vector
y %in% test_vector
x %in% test_vector | y %in% test_vector
x %in% test_vector & y %in% test_vector
x == test_vector
y == test_vector
test_vector[y == test_vector]
test_vector[y == test_vector]
test_vector[y != test_vector]
y != test_vector
test_vector[]
z <- 6
test_vector[(x==test_vector)|(y==test_vector)|(z==test_vector)]
test_vector[x== test_vector] | test_vector[y== test_vector]
test_vector[y== test_vector]
test_vector[x== test_vector]
test_vector[x== test_vector] | test_vector[y== test_vector]
test_vector[x== test_vector] & test_vector[y== test_vector]
#your code below
x <- 10
y <- 5
z <- 20
?function
(0)
?function
()
g(5)
g <- function(var) {
var*y#
}
g(5)
y <- 10 #this is a global variable
g(5)
g(6)
View(g)
x <- 10
y <- 2
test_vector <- c(2,5,6)
test_vector[(x==test_vector)|(y==test_vector)|(z==test_vector)]
test_vector[x== test_vector] | test_vector[y== test_vector]
save.image("C:/Users/jlowh/Documents/DSE5002/test.RData")
x <- 10
y <- 2
test_vector <- c(2,5,6)
z <- 6
test_vector[(x==test_vector)|(y==test_vector)|(z==test_vector)]
(x==test_vector)
(y==test_vector)
(z==test_vector)
test_vector[x== test_vector]
test_vector[y== test_vector]
(x==test_vector)
test_vector[x== test_vector]
test_vector[y== test_vector]
# Your code here
sales <- read.delim("Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding='WINDOWS-1252'
)
# Your code here
sales <- read.delim("Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding="ISO-8859-1"
)
# Your code here
sales <- read.delim("Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding="I"SO-8859-2"
# Your code here
sales <- read.delim("Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding="ISO-8859-2"
)
# Your code here
readr::guess_encoding("Data/sales_pipe.txt")
install.packages("readr")
# Your code here
readr::guess_encoding("Data/sales_pipe.txt")
# Your code here
sales <- read.delim("Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding="WINDOWS-1252"
)
#your code below
x <- 10
y <- 5
z <- 20
#your code below
(x<z)&(x>y)
#your code here
(x != z) | (y != z)
#your code below
(x + (2*y)) == z
test_vector <- c(1,5,11:22)
#your code below
(x %in% test_vector)|(y %in% test_vector)|(z %in% test_vector)
#your code below
test_vector[(x == test_vector)|(y == test_vector)|(z == test_vector)]
?which
#your code below
which(test_vector[(x == test_vector)|(y == test_vector)|(z == test_vector)])
#your code below
test_vector.which((x == test_vector)|(y == test_vector)|(z == test_vector))
#your code below
which((x == test_vector)|(y == test_vector)|(z == test_vector))
#your code below
which((x == test_vector)|(y == test_vector)|(z == test_vector),arr.ind=TRUE)
#your code below
cars_df <- mtcars()
#your code below
cars_df <- mtcars
x <- 10
y <- 5
z <- 20
#your code below
(x<z)&(x>y)
(x %in% test_vector)
test_vector <- c(1,5,11:22)
(x %in% test_vector)
test_vector <- c(1,5,11:22)
#your code below
(x %in% test_vector)|(y %in% test_vector)|(z %in% test_vector)
#your code below
test_vector[(x == test_vector)|(y == test_vector)|(z == test_vector)]
#your code below
which((x == test_vector)|(y == test_vector)|(z == test_vector))
test_vector
x
y
z
test_vector <- c(1,5,11:22)
#your code below
x %in% test_vector|y %in% test_vector|z %in% test_vector
#your code here
(x != z) && (y != z)
#your code here
(x != z) & (y != z)
#your code here
(x != z) & (y != z)
fib  <- function(n)
{
if (length(n) > 1) return(sapply(n, fib))
if (n == 1) return(1)
if (n == 2) return(1)
return(fib(n-1)+fib(n-2))
}
catalan <- function(n) {
cat <- vector("numeric", length(max(n)) + 1)
for (i in 0:max(n)) {
if (i == 0) {
cat[i+1] <- 1
} else {
cat[i+1] <- ((4*i - 2)*cat[i])/(i + 1)
}
}
return(cat[n + 1])
}
fib_vec <- fib(1:10)
fib_vec[1]
fib_vec[1:10]
fib_vec[1:5]
?c
test <- c(1,5,10)
type(test)
class(test)
fib_vec[c(1,5,15)]
which(fib_vec == 8)
fib_vec
which.max(fib_vec)
which.min(fib_vec)
catalan_vec <- catalan(1:10)
fib_vec[which.min(catalan)]
which.min(catalan)
fib_vec[which.min(catalan_vec)]
fib_vec[-which.min(catalan_vec)]
fib_vec[-1:-10]
fib_vec[-5:-10]
fib_vec + catalan_vec#vector addition
catalan_vec - fib_vec #vector subtraction
catalan_vec * fib_vec#vector multiplication
catalan_vec/fib_vec#v
c(catalan_vec,fib_vec)
any(catalan_vec==1)
any(catalan_vec==32)
all(catalan_vec==1)
sort(catalan_vec,decreasing=TRUE)
length(catalan_vec)
rep(catalan_vec,2)
seq(from=1,to=10,by=2)
# Elements are arranged sequentially by row.
M <- matrix(c(3:14), nrow = 4, byrow = TRUE)
print(M)
?matrix
# Elements are arranged sequentially by column.
N <- matrix(c(3:14), nrow = 4, byrow = FALSE)
print(N)
rownames = c("row1", "row2", "row3", "row4")
colnames = c("col1", "col2", "col3")
P <- matrix(c(3:14), nrow = 4, byrow = TRUE, dimnames = list(rownames, colnames))
View(P)
fib  <- function(n)
{
if (length(n) > 1) return(sapply(n, fib))
if (n == 1) return(1)
if (n == 2) return(1)
return(fib(n-1)+fib(n-2))
}
View(fib)
fib(1:10)
View(fib)
# Elements are arranged sequentially by row.
M <- matrix(c(3:14), nrow = 4, byrow = TRUE)
print(M)
# Elements are arranged sequentially by column.
N <- matrix(c(3:14), nrow = 4, byrow = FALSE)
print(N)
# Define the column and row names.
rownames = c("row1", "row2", "row3", "row4")
colnames = c("col1", "col2", "col3")
P <- matrix(c(3:14), nrow = 4, byrow = TRUE, dimnames = list(rownames, colnames))
print(P)
##############################################################################
###Accessing elements of a Matrix
# Define the column and row names.
rownames = c("row1", "row2", "row3", "row4")
colnames = c("col1", "col2", "col3")
# Create the matrix.
P <- matrix(c(3:14), nrow = 4, byrow = TRUE, dimnames = list(rownames, colnames))
print(P[1,3])
P
P$col1
P$row1
P['row1']
print(P[2,])
print(P[,3])
matrix1 <- matrix(c(3, 9, -1, 4, 2, 6), nrow = 2)
print(matrix1)
matrix2 <- matrix(c(5, 2, 0, 9, 3, 4), nrow = 2)
print(matrix2)
matrix1 + matrix2
##Multiplication and Division
# Create two 2x3 matrices.
matrix1 <- matrix(c(3, 9, -1, 4, 2, 6), nrow = 2)
print(matrix1)
matrix2 <- matrix(c(5, 2, 0, 9, 3, 4), nrow = 2)
print(matrix2)
matrix1 * matrix2
emp.data <- data.frame(
emp_id = c(1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
View(emp.data)
# Summarize the data frame.
summary(emp.data)
hist(emp.data$salary)
hist(emp.data$salary,bins=5)
str(emp_data)
emp_data <- data.frame(
emp_id = c(1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
str(emp_data)
?read.delim
sales_excel <- readxl::read_excel("Week_2/Data/sales.xlsx"
,sheet = "sales"
)
View(sales_excel)
# Read csv files (comma separated value)
sales_csv <- read.csv("Week_2/Data/sales.csv"
,stringsAsFactors=FALSE
)
# Read tab delimited files "\t" or any other file that is delimited
sales_tab_delim <- read.delim("Week_2/Data/sales.txt"
,stringsAsFactors=FALSE
,sep = "\t"
)
emp.data$emp_name
View(sales_csv)
temp_char <- stringr::str_split_fixed(string=sales_csv$Product.ID,pattern='-',n=3)
View(temp_char)
View(temp_char)
View(temp_char)
temp_char <- stringr::str_split_fixed(string=sales_csv$Order.ID,pattern='-',n=3)
paste(temp_char[,1], temp_char[,2],sep='-')
sales_csv$OrderNo <- temp_char[,3]
View(sales_csv)
View(temp_char)
# Splitting strings to create two new columns
## String split fixed will split the product id column into three columns in a matrix by the '-'
temp_char <- stringr::str_split_fixed(string=sales_csv$Product.ID,pattern='-',n=3)
# To recreate our Product ID we just paste the individual vectors together with the '-' seperator
sales_csv$Product <- paste(temp_char[,1], temp_char[,2],sep='-')
# Our product number is now just the third column of the matrix
sales_csv$Product.Number <- temp_char[,3]
cat(
sales_csv$Product.ID[1]
,sales_csv$Product[1]
,sales_csv$Product.Number[1]
,sep="\n\r"
)
cat(
sales_csv$Product.ID[1]
,sales_csv$Product[1]
,sales_csv$Product.Number[1]
,sep="\n\r"
)
# Check whether Region is a factor & find the unique values.
is.factor(sales_csv$Region)
unique(sales_csv$Region)
factor(sales$Region)
factor(sales_csv$Region)
unique(sales_csv$Region)
sales_csv$Region <- factor(sales_csv$Region)
is.factor(sales_csv$Region)
levels(sales_csv$Region)
# Create a basic barplot
barplot(table(sales_csv$Region))
# What if we wanted to change the order of the categories in the barplot?
# Use factors and reorder the levels
sales_csv$Region <- factor(sales_csv$Region
,levels=c('West','East','Central','South')
)
levels(sales_csv$Region)
barplot(table(sales_csv$Region))
# Get the structure of the date column
str(sales_csv$Order.Date)
inherits(sales_csv$Order.Date
, c("Date")
)
?as.Date
# Using the table in our notes, convert the character to a date obeject.
sales_csv$Order.Date <- as.Date(sales_csv$Order.Date
,format='%m/%d/%Y'
)
# Check to see if our conversion worked
inherits(sales_csv$Order.Date
, c("Date")
)
str(sales_csv$Order.Date)
sales_csv[1:10,5]
(sales_csv$Ship.Mode=='First Class')
|(sales_csv$City=='Henderson')
(sales_csv$City=='Henderson')
first_class_df = sales_csv[(sales_csv$Ship.Mode=='First Class')|(sales_csv$City=='Henderson') ,]
View(first_class_df)
first_class_df = sales_csv[(sales_csv$Ship.Mode=='First Class')&(sales_csv$City=='Henderson') ,]
View(first_class_df)
list_data <- list("Male", "Female", c(35,42,5), FALSE, 220.5,
read.delim("Week_2/Data/sales.txt"
,stringsAsFactors=FALSE
,sep = "\t"
)
)
list_data[[1]]
list_data[[3]]
list_data[[6]]$City[1]
?list
# Create a list containing strings, numbers, vectors and a logical values.
list_data <- list('obj1'="Male", 'obj2'="Female", 'obj3'=c(35,42,5),
'obj4'=read.delim("Week_2/Data/sales.txt"
,stringsAsFactors=FALSE
,sep = "\t"
)
)
list_data['obj4']
list_data['obj2']
list_data$obj1
list_data$obj3[1]
list_data$obj4$Customer.ID[5]
data <- list_data$obj4
View(data)
?sort
test <- data[order(data$State),]
View(test)
# Your code here
sales <- read.delim("Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding="WINDOWS-1252"
)
# Your code here
sales <- read.delim("Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding="WINDOWS-1252"
)
?aggregate
table(sale$table)
table(sales$table)
?table
table(factor(sales$table))
t <- table(factor(sales$table))
t
View(sales)
?str_split_fixed
library(tidyr)
library(ggplot2)
library(dplyr)
data(who)
data(population)
who2 <- who %>%
pivot_longer(
cols = new_sp_m014:newrel_f65,
names_to = c("diagnosis", "gender", "age"),
names_pattern = "new_?(.*)_(.)(.*)",
values_to = "count"
) %>%
left_join(population,by=c('country','year')) %>%
separate(sep=-2, into=c('min_age','max_age'),col=age) %>%
mutate(min_age = ifelse(max_age=='65','65',min_age),
max_age = ifelse(max_age=='65','Inf',max_age)
) %>%
unite("age_range",min_age:max_age,sep='-')
?pivot_longer
View(who)
ggplot(agg1,aes(x=gender,y=count)) +
geom_col() +
facet_grid(~diagnosis)
agg1 <- who2 %>%
group_by(diagnosis,gender) %>%
summarize(count = sum(count,na.rm=T))
ggplot(agg1,aes(x=gender,y=count)) +
geom_col() +
facet_grid(~diagnosis)
View(who2)
agg2 <- who2 %>%
group_by(year,gender,diagnosis) %>%
summarize(percent_pop = sum(count,na.rm=T)/mean(population,na.rm=T))%>%
drop_na()
ggplot(agg2,aes(x=year,y=percent_pop,color=gender)) +
geom_line() +
facet_grid(diagnosis~.)
agg3 <- who2 %>%
group_by(diagnosis) %>%
summarize(total_count = sum(count,na.rm=T))
agg4 <- who2 %>%
group_by(age_range,diagnosis) %>%
summarize(age_count = sum(count,na.rm=T)) %>%
left_join(agg3,by='diagnosis') %>%
mutate(percent_of_total = age_count/total_count)
ggplot(agg4,aes(x=diagnosis,y=percent_of_total))+
geom_col() +
facet_grid(.~age_range)
ggplot(agg4,aes(x=diagnosis,y=percent_of_total,fill=diagnosis))+
geom_col() +
facet_grid(.~age_range)
agg1 <- who2 %>%
group_by(diagnosis,gender) %>%
summarize(count = sum(count,na.rm=T))
ggplot(agg1,aes(x=gender,y=count)) +
geom_col() +
facet_grid(~diagnosis)
View(agg1)
?summerize
# Your code here
sales <- read.delim("DSE5002/Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
)
# Your code here
sales <- read.delim("/Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
)
myf <- function(x) {
y = 9
innerf <- function(x) assign('Global.res', x^2, envir = .GlobalEnv)
innerf(x+1)
}
myf(3)
install.packages("dplyr")
x <- 10
y <- 5
z <- 20
tinytex::reinstall_tinytex
