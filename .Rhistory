# Your code here
texas_df <- sales[sales$State == 'Texas',]
texas_df$Category <- factor(texas_df$Category)
barplot(table(texas_df$Category))
# Your code here
texas_df = sales[sales$State=="Texas",]
texas_df$Category = factor(texas_df$Category)
barplot(table(texas_df$Category))
# Your code here
aggregate(sales$Profit, year(sales$Order.Date)), FUN=mean)
# Your code here
aggregate(sales$Profit, year(sales$Order.Date), FUN=mean)
# Your code here
aggregate(sales$Profit, list(year(sales$Order.Date)), FUN=mean)
# Your code here
aggregate(sales$Profit, list(year(sales$Order.Date)), FUN=mean)
# Your code here
library(stringr)
length(str_which(sales$Product.Name, "table"))
# Your code here
library(stringr)
length(str_which(sales$Product.Name, 'table'))
# Your code here
sales <- read.delim("C:/DSE5002/Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding="WINDOWS-1252"
)
# Your code here
library(stringr)
colnames(sales)[1] <- 'Row.ID'
# Your code here
library(lubridate)
sales$Ship.Date <- as.Date(sales$Ship.Date
, format ='%B %d %Y')
sales$Order.Date <- as.Date(sales$Order.Date
, format= '%m/%d/%Y')
difftime(max(sales$Order.Date),min(sales$Order.Date))
difftime(max(sales$Order.Date),min(sales$Order.Date)) / dyears(1) ##Years
difftime(max(sales$Order.Date),min(sales$Order.Date)) / dweeks(1) ##Weeks
# Your code here
(mean(difftime((sales$Ship.Date),(sales$Order.Date))))/ddays(1)
# Your code here
library(stringr)
unique_names <- unique(sales$Customer.Name)
first_name <- str_split_fixed(unique_names, pattern = ' ', n=3)
length(str_which(first_name, "Bill"))
# Your code here
library(stringr)
length(str_which(sales$Product.Name, 'table'))
# Your code here
library(stringr)
unique_names <- unique(sales$Customer.Name)
first_name <- str_split_fixed(unique_names, pattern = ' ', n=3)
length(str_which(first_name, "Bill"))
# Your code here
library(stringr)
length(str_which(sales$Product.Name, 'table'))
# Your code here
sales$State <- factor(sales$State)
table(sales$State)
# Your code here
texas_df <- sales[sales$State == 'Texas',]
texas_df$Category <- factor(texas_df$Category)
barplot(table(texas_df$Category))
# Your code here
aggregate(sales$Profit, list(sales$Region), FUN=mean)
# Your code here
aggregate(sales$Profit, list(year(sales$Order.Date)), FUN=mean)
# Your code here
library(lubridate)
sales$Ship.Date <- as.Date(sales$Ship.Date
, format ='%B %d %Y')
sales$Order.Date <- as.Date(sales$Order.Date
, format= '%m/%d/%Y')
fulfillment_time <- difftime(max(sales$Order.Date),min(sales$Order.Date))
fulfillment_time / dyears(1) ##Years
fulfillment_time / dweeks(1) ##Weeks
# Your code here
(mean(fulfillment_time)/ddays(1)
# Your code here
(mean(fulfillment_time))/ddays(1)
# Your code here
library(lubridate)
sales$Ship.Date <- as.Date(sales$Ship.Date
, format ='%B %d %Y')
sales$Order.Date <- as.Date(sales$Order.Date
, format= '%m/%d/%Y')
fulfillment_time <- difftime(max(sales$Order.Date),min(sales$Order.Date))
fulfillment_time / dyears(1) ##Years
fulfillment_time / dweeks(1) ##Weeks
# Your code here
(mean(difftime((sales$Ship.Date),(sales$Order.Date))))/ddays(1)
# Your code here
library(stringr)
unique_names <- unique(sales$Customer.Name)
first_name <- str_split_fixed(unique_names, pattern = ' ', n=3)
length(str_which(first_name, "Bill"))
# Your code here
library(stringr)
length(str_which(sales$Product.Name, 'table'))
# Your code here
sales$State <- factor(sales$State)
table(sales$State)
# Your code here
texas_df <- sales[sales$State == 'Texas',]
texas_df$Category <- factor(texas_df$Category)
barplot(table(texas_df$Category))
# Your code here
aggregate(sales$Profit, list(sales$Region), FUN=mean)
# Your code here
aggregate(sales$Profit, list(year(sales$Order.Date)), FUN=mean)
# Your code here
library(stringr)
length(str_which(sales$Product.Name, 'table'))
# Your code here
library(stringr)
length(str_detec(sales$Product.Name, 'table'))
# Your code here
library(stringr)
length(str_detect(sales$Product.Name, 'table'))
# Your code here
library(stringr)
length(str_which(sales$Product.Name, 'table'))
##length(str_which(sales$Product.Name, 'table'))
# Your code here
library(stringr)
length(str_detect(sales$Product.Name, pattern = 'table', negate = FALSE)
##length(str_which(sales$Product.Name, 'table'))
# Your code here
library(stringr)
length(str_detect(sales$Product.Name, pattern = 'table', negate = FALSE))
##length(str_which(sales$Product.Name, 'table'))
?str_detect
?"'"
# Your code here
library(stringr)
length(str_detect(sales$Product.Name, pattern = '\stable\s', negate = FALSE))
# Your code here
library(stringr)
length(str_detect(sales$Product.Name, pattern = '\\stable\\s', negate = FALSE))
##length(str_which(sales$Product.Name, 'table'))
# Your code here
library(stringr)
length(str_match(sales$Product.Name, pattern = '\\stable\\s', negate = FALSE))
# Your code here
library(stringr)
length(str_which(sales$Product.Name, pattern = '\\stable\\s', negate = FALSE))
##length(str_which(sales$Product.Name, 'table'))
# Your code here
library(stringr)
length(str_which(sales$Product.Name, pattern = 'tables', negate = FALSE))
##length(str_which(sales$Product.Name, 'table'))
# Your code here
library(stringr)
length(str_which(sales$Product.Name, pattern = 'table', negate = FALSE))
##length(str_which(sales$Product.Name, 'table'))
# Your code here
library(stringr)
length(str_which(sales$Product.Name, pattern = 'table'))
##length(str_which(sales$Product.Name, 'table'))
# Your code here
library(stringr)
length(str_which(sales$Product.Name, pattern = 'table'))
##length(str_which(sales$Product.Name, 'table'))
# Your code here
library(stringr)
length(str_which(sales$Product.Name, pattern = 'tables'))
##length(str_which(sales$Product.Name, 'table'))
# Your code here
library(stringr)
str_which(sales$Product.Name, pattern = 'tables')
##length(str_which(sales$Product.Name, pattern = 'tables'))
##length(str_which(sales$Product.Name, 'table'))
# Your code here
library(stringr)
length(str_count(sales$Product.Name, pattern = 'tables'))
##length(str_which(sales$Product.Name, 'table'))
# Your code here
library(stringr)
length(str_count(sales$Product.Name,'tables'))
##length(str_which(sales$Product.Name, 'table'))
# Your code here
library(stringr)
str_count(sales$Product.Name,'tables')
##length(str_which(sales$Product.Name, 'table'))
# Your code here
library(stringr)
str_count(sales$Product.Name,'table')
##length(str_which(sales$Product.Name, 'table'))
# Your code here
library(stringr)
sum(str_count(sales$Product.Name,'table'))
##length(str_which(sales$Product.Name, 'table'))
# Your code here
library(stringr)
length(str_count(sales$Product.Name,'table'))
##length(str_which(sales$Product.Name, 'table'))
# Your code here
library(stringr)
sum(str_count(sales$Product.Name,'table'))
##length(str_which(sales$Product.Name, 'table'))
# Your code here
length(grep("(?i)\\table", sales$Product.Name))
# Your code here
length(grep("(?i)\\table", sales$Product.Name))
# Your code here
sales <- read.delim("C:/DSE5002/Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding="WINDOWS-1252"
)
# Your code here
library(stringr)
colnames(sales)[1] <- 'Row.ID'
# Your code here
library(lubridate)
sales$Ship.Date <- as.Date(sales$Ship.Date
, format ='%B %d %Y')
sales$Order.Date <- as.Date(sales$Order.Date
, format= '%m/%d/%Y')
fulfillment_time <- difftime(max(sales$Order.Date),min(sales$Order.Date))
fulfillment_time / dyears(1) ##Years
fulfillment_time / dweeks(1) ##Weeks
# Your code here
(mean(difftime((sales$Ship.Date),(sales$Order.Date))))/ddays(1)
# Your code here
library(stringr)
unique_names <- unique(sales$Customer.Name)
first_name <- str_split_fixed(unique_names, pattern = ' ', n=3)
length(str_which(first_name, "Bill"))
# Your code here
library(stringr)
sum(str_count(sales$Product.Name,'table'))
##length(str_which(sales$Product.Name, 'table'))
# Your code here
sales$State <- factor(sales$State)
table(sales$State)
# Your code here
texas_df <- sales[sales$State == 'Texas',]
texas_df$Category <- factor(texas_df$Category)
barplot(table(texas_df$Category))
# Your code here
aggregate(sales$Profit, list(sales$Region), FUN=mean)
# Your code here
aggregate(sales$Profit, list(year(sales$Order.Date)), FUN=mean)
# Your code here
length(grep("(?i)\\table", sales$Product.Name))
View(sales)
# Your code here
library(stringr)
(str_count(sales$Product.Name,'table')
##length(str_which(sales$Product.Name, 'table'))
# Your code here
library(stringr)
sum(str_count(sales$Product.Name,'table')
##length(str_which(sales$Product.Name, 'table'))
# Your code here
library(stringr)
sum((str_count(sales$Product.Name,'table'))
##length(str_which(sales$Product.Name, 'table'))
# Your code here
library(stringr)
sum(str_count(sales$Product.Name,'table'))
##length(str_which(sales$Product.Name, 'table'))
# Your code here
library(stringr)
sum(str_count(sales$Product.Name,'table'))
View(sales)
# Your code here
length(grep("(?i)\\table", sales$Product.Name))
# Your code here
library(stringr)
sum(str_count(sales$Product.Name,'\\stable'))
# Your code here
library(stringr)
sum(str_count(sales$Product.Name,'\\stable\\s'))
# Your code here
library(stringr)
sum(str_count(sales$Product.Name,'table'))
# Your code here
library(stringr)
sum(str_match(sales$Product.Name,'table'))
# Your code here
library(stringr)
sum(str_count(sales$Product.Name,'table'))
# Your code here
library(stringr)
length(str_count(sales$Product.Name,'table'))
# Your code here
library(stringr)
sum(str_count(sales$Product.Name,'table'))
# Your code here
library(stringr)
sum(str_count(sales$Product.Name,'table'))
# Your code here
library(stringr)
sum(str_count(sales$Product.Name,'table'))
# Your code here
library(stringr)
length(str_which(sales$Product.Name,'table'))
# Your code here
library(stringr)
length(str_which(sales$Product.Name,'table'))
# Your code here
library(stringr)
sum(str_which(sales$Product.Name,'table'))
# Your code here
library(stringr)
sum(str_count(sales$Product.Name,'table'))
# Your code here
library(stringr)
str_view_all(sales$Product.Name,'table'))
# Your code here
library(stringr)
str_view_all(sales$Product.Name,'table')
?str_view
# Your code here
library(stringr)
str_view_all(sales$Product.Name, pattern = table)
# Your code here
library(stringr)
str_view(sales$Product.Name, pattern = table)
# Your code here
library(stringr)
str_view(sales$Product.Name, pattern = 'table')
# Your code here
library(stringr)
str_view(sales$Product.Name, pattern = 'table', match = TRUE)
# Your code here
library(stringr)
str_view(sales$Product.Name, pattern = 'table', match = TRUE)
# Your code here
library(stringr)
sales$Product.Name
# Your code here
library(stringr)
str_split_fixed(sales$Product.Name, pattern = ' ', n=3)
# Your code here
library(stringr)
str_split_fixed(sales$Product.Name, pattern = ' ', n=3)
# Your code here
library(stringr)
str_split_fixed(sales$Product.Name, pattern = ' ', n=3)
# Your code here
library(stringr)
str_count(sales$Product.Name, 'table')
# Your code here
library(stringr)
sum(str_count(sales$Product.Name, 'table'))
# Your code here
library(stringr)
sum(str_count(sales$Product.Name, 'table'))
# Your code here
library(stringr)
sum(str_count(sales$Product.Name, 'table'))
# Your code here
library(stringr)
str_count(sales$Product.Name, 'table'))
# Your code here
library(stringr)
str_count(sales$Product.Name, 'table')
# Your code here
library(stringr)
sum(str_count(sales$Product.Name, 'table'))
# Your code here
library(stringr)
sum(str_count(sales$Product.Name, 'table'))
# Your code here
sales <- read.delim("C:/DSE5002/Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding="WINDOWS-1252"
)
# Your code here
library(stringr)
colnames(sales)[1] <- 'Row.ID'
# Your code here
library(lubridate)
sales$Ship.Date <- as.Date(sales$Ship.Date
, format ='%B %d %Y')
sales$Order.Date <- as.Date(sales$Order.Date
, format= '%m/%d/%Y')
fulfillment_time <- difftime(max(sales$Order.Date),min(sales$Order.Date))
fulfillment_time / dyears(1) ##Years
fulfillment_time / dweeks(1) ##Weeks
# Your code here
(mean(difftime((sales$Ship.Date),(sales$Order.Date))))/ddays(1)
# Your code here
(mean(difftime((sales$Ship.Date),(sales$Order.Date))))/ddays(1)
# Your code here
library(stringr)
unique_names <- unique(sales$Customer.Name)
first_name <- str_split_fixed(unique_names, pattern = ' ', n=3)
length(str_which(first_name, "Bill"))
# Your code here
library(stringr)
unique_names <- unique(sales$Customer.Name)
first_name <- str_split_fixed(unique_names, pattern = ' ', n=3)
length(str_which(first_name, "Bill"))
# Your code here
library(stringr)
sum(str_count(sales$Product.Name, 'table'))
# Your code here
sales$State <- factor(sales$State)
table(sales$State)
# Your code here
sales$State <- factor(sales$State)
table(sales$State)
# Your code here
texas_df <- sales[sales$State == 'Texas',]
texas_df$Category <- factor(texas_df$Category)
barplot(table(texas_df$Category))
# Your code here
texas_df <- sales[sales$State == 'Texas',]
texas_df$Category <- factor(texas_df$Category)
barplot(table(texas_df$Category))
# Your code here
aggregate(sales$Profit, list(sales$Region), FUN=mean)
# Your code here
aggregate(sales$Profit, list(year(sales$Order.Date)), FUN=mean)
# Your code here
aggregate(sales$Profit, list(year(sales$Order.Date)), FUN=mean)
# Your code here
library(stringr)
length(str_count(sales$Product.Name, 'table'))
# Your code here
library(stringr)
length(str_which(sales$Product.Name, 'table'))
# Your code here
library(stringr)
length(str_which(sales$Product.Name, 'table'))
# Your code here
library(stringr)
length(str_which(sales$Product.Name, 'table'))
# Your code here
library(stringr)
unique_names <- unique(sales$Customer.Name)
first_name <- str_split_fixed(unique_names, pattern = ' ', n=3)
length(str_detect(first_name, "Bill"))
# Your code here
library(stringr)
unique_names <- unique(sales$Customer.Name)
first_name <- str_split_fixed(unique_names, pattern = ' ', n=3)
length(str_match(first_name, "Bill"))
# Your code here
library(stringr)
unique_names <- unique(sales$Customer.Name)
first_name <- str_split_fixed(unique_names, pattern = ' ', n=3)
length(str_which(first_name, "Bill"))
# Your code here
library(stringr)
length(str_which(sales$Product.Name, 'table'))
# Your code here
sales <- read.delim("C:/DSE5002/Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
,fileEncoding="WINDOWS-1252"
)
# Your code here
library(stringr)
colnames(sales)[1] <- 'Row.ID'
# Your code here
library(lubridate)
sales$Ship.Date <- as.Date(sales$Ship.Date
, format ='%B %d %Y')
sales$Order.Date <- as.Date(sales$Order.Date
, format= '%m/%d/%Y')
fulfillment_time <- difftime(max(sales$Order.Date),min(sales$Order.Date))
fulfillment_time / dyears(1) ##Years
fulfillment_time / dweeks(1) ##Weeks
# Your code here
(mean(difftime((sales$Ship.Date),(sales$Order.Date))))/ddays(1)
# Your code here
library(stringr)
unique_names <- unique(sales$Customer.Name)
first_name <- str_split_fixed(unique_names, pattern = ' ', n=3)
length(str_which(first_name, "Bill"))
# Your code here
library(stringr)
length(str_which(sales$Product.Name, 'table'))
# Your code here
sales$State <- factor(sales$State)
table(sales$State)
# Your code here
texas_df <- sales[sales$State == 'Texas',]
texas_df$Category <- factor(texas_df$Category)
barplot(table(texas_df$Category))
# Your code here
aggregate(sales$Profit, list(sales$Region), FUN=mean)
# Your code here
aggregate(sales$Profit, list(year(sales$Order.Date)), FUN=mean)
# Your code here
library(lubridate)
sales$Ship.Date <- as.Date(sales$Ship.Date
, format ='%B %d %Y')
sales$Order.Date <- as.Date(sales$Order.Date
, format= '%m/%d/%Y')
fulfillment_time <- difftime(max(sales$Order.Date),min(sales$Order.Date))
print(fulfillment_time)
fulfillment_time / dyears(1) ##Years
fulfillment_time / dweeks(1) ##Weeks
# Your code here
library(lubridate)
sales$Ship.Date <- as.Date(sales$Ship.Date
, format ='%B %d %Y')
sales$Order.Date <- as.Date(sales$Order.Date
, format= '%m/%d/%Y')
fulfillment_time <- difftime(max(sales$Order.Date),min(sales$Order.Date))
print(fulfillment_time) ## Difference in Days
fulfillment_time / dyears(1) ##Difference in Years
fulfillment_time / dweeks(1) ##Difference in Weeks
